model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, classProb = True, metric = "ROC")
train_control <- trainControl(method = "cv", number = 5, classProbs = True, summaryFunction = twoClassSummary)
train_control <- trainControl(method = "cv", number = 5, classProbs = TRUE, summaryFunction = twoClassSummary)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
smote_training_set[1,]
class(smote_training_set[1,])
class(smote_training_set[,1])
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10)
train_control <- trainControl(method = "cv", number = 5, classProbs = TRUE)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
levels(smote_training_set$LABEL) <- list(no = "0", yes = "1")
smote_training_set[1,]
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
train_control <- trainControl(method = "cv", number = 5, classProbs = TRUE, summaryFunction = twoClassSummary)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10)
print(model)
# train the model
model <- train(LABEL ~ ., data = down_training_set, trControl = train_control, method = "knn", tuneLength = 10)
# train the model
model <- train(Class ~ ., data = down_training_set, trControl = train_control, method = "knn", tuneLength = 10)
levels(up_training_set$LABEL) <- list(no = "0", yes = "1")
levels(up_training_set$Class) <- list(no = "0", yes = "1")
levels(down_training_set$Class) <- list(no = "0", yes = "1")
levels(rose_training_set$LABEL) <- list(no = "0", yes = "1")
levels(rose_training_set$Class) <- list(no = "0", yes = "1")
rose[1,]
rose_training_set[1,]
rose_training_set[]
# train the model
model <- train(Class ~ ., data = up_training_set, trControl = train_control, method = "knn", tuneLength = 10)
print(model)
# train the model
model <- train(Class ~ ., data = down_training_set, trControl = train_control, method = "knn", tuneLength = 10)
warnings()
print(model)
# train the model
model <- train(Class ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10)
print(model)
# train the model
model <- train(LABEL ~ ., data = rose_training_set, trControl = train_control, method = "knn", tuneLength = 10)
# train the model
model <- train(LABEL ~ ., data = rose_training_set$data, trControl = train_control, method = "knn", tuneLength = 10)
levels(rose_training_set$data$LABEL) <- list("0" = no, "1" = yes)
rose_training_set$data$LABEL
levels(rose_training_set$data$LABEL) <- list(no = "0", yes = "1")
# train the model
model <- train(LABEL ~ ., data = rose_training_set$data, trControl = train_control, method = "knn", tuneLength = 10)
print(model)
# train the model
model <- train(LABEL ~ ., data = up_training_set, trControl = train_control, method = "knn", tuneLength = 10)
# train the model
model <- train(Class ~ ., data = up_training_set, trControl = train_control, method = "knn", tuneLength = 10)
model
str(model)
# train the model
model <- train(Class ~ ., data = up_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
rm(tr_ctl_method)
rm(tr_ctl_number)
rm(tr_ctl_sampling)
model
cl <- makeCluster(detectCores())
registerDoParallel(cl)
# train the model
model <- train(Class ~ ., data = up_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
model
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
print(model)
# train the model
model <- train(LABEL ~ ., data = rose_training_set$data, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
model
predict(model, antidepressant_chem)
warnings()
antidepressant_bio <- apply(antidepressant_bio, 2, as.factor)
antidepressant_bio <- as.data.frame(apply(antidepressant_bio, 2, as.factor))
antidepressant_chem <- as.data.frame(apply(antidepressant_chem, 2, as.factor))
antidepressant_pharm <- as.data.frame(apply(antidepressant_pharm, 2, as.factor))
without_antidepressant_bio <- as.data.frame(apply(without_antidepressant_bio, 2, as.factor))
without_antidepressant_chem <- as.data.frame(apply(without_antidepressant_chem, 2, as.factor))
without_antidepressant_pharm <- as.data.frame(apply(without_antidepressant_pharm, 2, as.factor))
without_antidepressant_bio <- apply(without_antidepressant_bio, 2, levels, list(no = "0", yes = "1"))
without_antidepressant_bio <- as.data.frame(apply(without_antidepressant_bio, 2, levels, list(no = "0", yes = "1")))
without_antidepressant_bio <- as.data.frame(apply(without_antidepressant_bio, 2, levels, (no = "0", yes = "1")))
without_antidepressant_bio <- as.data.frame(apply(without_antidepressant_bio, 2, levels, c(no = "0", yes = "1")))
without_antidepressant_bio_l <- as.data.frame(apply(without_antidepressant_bio, factor, 2, levels = list(no = "0", yes = "1")))
without_antidepressant_bio_l <- as.data.frame(apply(without_antidepressant_bio, 2, factor, levels = list(no = "0", yes = "1")))
without_antidepressant_bio_1[1:5, 1:3]
without_antidepressant_bio_l[1:5, 1:3]
class(without_antidepressant_bio_l[, 1])
without_antidepressant_bio_l <- as.data.frame(apply(without_antidepressant_bio, 2, factor, levels = c(0, 1), label = c(no, yes)))
without_antidepressant_bio_l <- as.data.frame(apply(without_antidepressant_bio, 2, factor, levels = c(0, 1), label = c("no", "yes")))
class(without_antidepressant_bio_l[, 1])
without_antidepressant_bio_l[1:5, 1:3]
without_antidepressant_bio_l[1:10, 1:3]
without_antidepressant_bio_l[1:15, 1:3]
without_antidepressant_bio_l[1:15, 1:5]
without_antidepressant_bio_l[1:15, 1:6]
without_antidepressant_bio_l[1:20, 1:6]
without_antidepressant_bio_l[1:30, 1:6]
without_antidepressant_bio[1:30, 1:6]
without_antidepressant_bio <- as.data.frame(apply(without_antidepressant_bio, 2, factor, levels = c(0, 1), label = c("no", "yes")))
antidepressant_bio <- as.data.frame(apply(antidepressant_bio, 2, factor, levels = c(0, 1), label = c("no", "yes")))
predict(model, antidepressant_chem)
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(antidepressant_bio[, 1], predict_result)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(antidepressant_bio[, 1], predict_result)
# train the model
model <- train(LABEL ~ ., data = up_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
# train the model
model <- train(Class ~ ., data = up_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
confusionMatrix(antidepressant_bio[, 1], predict_result)
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(antidepressant_bio[, 1], predict_result)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(antidepressant_bio[, 1], predict_result)
# train the model
model <- train(LABEL ~ ., data = rose_training_set$data, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(antidepressant_bio[, 1], predict_result)
# train the model
model <- train(LABEL ~ ., data = rose_training_set$data, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(antidepressant_bio[, 1], predict_result)
# train the model
model <- train(LABEL ~ ., data = rose_training_set$data, trControl = train_control, method = "knn", tuneLength = 10, metric = "Spec")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(antidepressant_bio[, 1], predict_result)
# train the model
model <- train(LABEL ~ ., data = rose_training_set$data, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(antidepressant_bio[, 1], predict_result)
confusionMatrix(predict_result, antidepressant_bio[, 1])
antidepressant_bio[,1]
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(predict_result, antidepressant_bio[, 1])
# train the model
model <- train(Class ~ ., data = down_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(predict_result, antidepressant_bio[, 1])
# train the model
model <- train(Class ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(predict_result, antidepressant_bio[, 1])
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(predict_result, antidepressant_bio[, 1])
# train the model
model <- train(LABEL ~ ., data = rose_training_set$data, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(predict_result, antidepressant_bio[, 1])
# train the model
model <- train(LABEL ~ ., data = smote_training_set$data, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(predict_result, antidepressant_bio[, 1])
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(predict_result, antidepressant_bio[, 1])
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 200)
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 500)
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
class(training_set[, 1])
training_set <- as.data.frame(cbind(without_antidepressant_chem, without_antidepressant_bio[, 1]))
training_set <- as.data.frame(cbind(without_antidepressant_chem, LABEL = without_antidepressant_bio[, 1]))
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(predict_result, antidepressant_bio[, 1])
model
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000)
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 2000)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
predict_result <- predict(model, antidepressant_chem)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
confusionMatrix(predict_result, antidepressant_bio[, 1])
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 500)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
model
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000)
predict_result <- predict(model, antidepressant_chem)
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000, perc.under = 0)
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000, perc.under = 200)
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000, perc.under = 500)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
predict_result <- predict(model, antidepressant_chem)
model
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000, perc.under = 500)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000, perc.under = 250)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
nodel
model
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(predict_result, antidepressant_bio[, 1])
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1250, perc.under = 0)
View(down_training_set)
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000, perc.under = 250)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
confusionMatrix(predict_result, antidepressant_bio[, 1])
str(model)
chem_bio_model <- list()
chem_bio_model <- list(chem_bio_model, model)
str(chem_bio_model)
predict_result <- predict(model$finalModel, antidepressant_chem)
confusionMatrix(predict_result, antidepressant_bio[, 1])
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(predict_result, antidepressant_bio[, 1])
?predict
chem_bio_model[1]
chem_bio_model[2]
chem_bio_model <- list(model)
str(chem_bio_model)
chem_bio_model <- list(chem_bio_model, model)
chem_bio_model <- list(chem_bio_model, model)
chem_bio_model <- list(chem_bio_model, model)
chem_bio_model <- list(chem_bio_model, model, model)
# train the model
model <- train(Class ~ ., data = down_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
chem_bio_model <- list(chem_bio_model, model)
length(chem_bio_model)
chem_bio_model[3] <- model
chem_bio_model[[3] <- model
chem_bio_model[[3]] <- model
chem_bio_model[[4]] <- model
chem_bio_model[3]
chem_bio_model[4]
chem_bio_model[[3]]
str(chem_bio_model[[3]])
chem_bio_model[[5]] <- model
chem_bio_model[[6]] <- model
chem_bio_model[[7]] <- model
for i in 1:10:
for(i in 1:10) { chem_bio_model[[i]] <- model }
for(i in 1:10) { chem_bio_model[[i]] <- model }
for(i in 1:50) { chem_bio_model[[i]] <- model }
for(i in 1:50) { chem_bio_model[[i]] <- model }
for(i in 1:50) { chem_bio_model[[i]] <- model }
for(i in 1:500) { chem_bio_model[[i]] <- model }
for(i in 1:500) { chem_bio_model[[i]] <- model }
for(i in 1:1000) { chem_bio_model[[i]] <- model }
for(i in 1:2000) { chem_bio_model[[i]] <- model }
for(i in 1:5000) { chem_bio_model[[i]] <- model }
for(i in 1:10000) { chem_bio_model[[i]] <- model }
chem_bio_model <- list()
rm(i)
knn_chem_pred_bio <- read.csv("..\\..\\Data\\knn_chem_predict_bio_antidepressant.csv")
knn_chem_pred_bio <- read.csv("..\\..\\data\\knn_chem_predict_bio_antidepressant.csv")
knn_chem_pred_bio <- read.csv("..\\..\\data\\yy2012\\knn_chem_predict_bio_antidepressant.csv")
knn_chem_pred_bio
knn_chem_pred_bio[1:5,]
knn_chem_pred_bio[1:5, 1:3]
rownames(knn_chem_pred_bio) <- knn_chem_pred_bio[, 1]
knn_chem_pred_bio
knn_chem_pred_bio[1:5, 1:3]
knn_chem_pred_bio <- knn_chem_pred_bio[, -1]
knn_chem_pred_bio[1:5, 1:3]
pred <- melt(knn_chem_pred_bio, measure.vars = colnames(knn_chem_pred_bio))[, 2]
obs <- melt(antidepressant_bio, measure.vars = colnames(antidepressant_bio))[, 2]
knn_chem_pred_bio_confusion_matrix <- NULL
for(i in seq(from = 0, to = 1, 0.1)) {
tmp <- pred
tmp[tmp >= i] <- 1
tmp[tmp < i] <- 0
knn_chem_pred_bio_confusion_matrix <- list.append(knn_chem_pred_bio_confusion_matrix, list(confusionMatrix(tmp, obs, positive = "1"), paste("Cutoff: ", i)))
}
library(reshape2)
pred <- melt(knn_chem_pred_bio, measure.vars = colnames(knn_chem_pred_bio))[, 2]
obs <- melt(antidepressant_bio, measure.vars = colnames(antidepressant_bio))[, 2]
knn_chem_pred_bio_confusion_matrix <- NULL
for(i in seq(from = 0, to = 1, 0.1)) {
tmp <- pred
tmp[tmp >= i] <- 1
tmp[tmp < i] <- 0
knn_chem_pred_bio_confusion_matrix <- list.append(knn_chem_pred_bio_confusion_matrix, list(confusionMatrix(tmp, obs, positive = "1"), paste("Cutoff: ", i)))
}
librry(rlist)
library(rlist)
pred <- melt(knn_chem_pred_bio, measure.vars = colnames(knn_chem_pred_bio))[, 2]
obs <- melt(antidepressant_bio, measure.vars = colnames(antidepressant_bio))[, 2]
knn_chem_pred_bio_confusion_matrix <- NULL
for(i in seq(from = 0, to = 1, 0.1)) {
tmp <- pred
tmp[tmp >= i] <- 1
tmp[tmp < i] <- 0
knn_chem_pred_bio_confusion_matrix <- list.append(knn_chem_pred_bio_confusion_matrix, list(confusionMatrix(tmp, obs, positive = "1"), paste("Cutoff: ", i)))
}
library(caret)
pred <- melt(knn_chem_pred_bio, measure.vars = colnames(knn_chem_pred_bio))[, 2]
obs <- melt(antidepressant_bio, measure.vars = colnames(antidepressant_bio))[, 2]
knn_chem_pred_bio_confusion_matrix <- NULL
for(i in seq(from = 0, to = 1, 0.1)) {
tmp <- pred
tmp[tmp >= i] <- 1
tmp[tmp < i] <- 0
knn_chem_pred_bio_confusion_matrix <- list.append(knn_chem_pred_bio_confusion_matrix, list(confusionMatrix(tmp, obs, positive = "1"), paste("Cutoff: ", i)))
}
pred
obs
apply(antidepressant_bio, 2, factor, levels("no", "yes"), labels(0, 1))
apply(antidepressant_bio, 2, factor, levels = c("no", "yes"), labels = c(0, 1))
antidepressant_bio_nominal <- antidepressant_bio
antidepressant_bio <- apply(antidepressant_bio, 2, factor, levels = c("no", "yes"), labels = c(0, 1))
pred <- melt(knn_chem_pred_bio, measure.vars = colnames(knn_chem_pred_bio))[, 2]
obs <- melt(antidepressant_bio, measure.vars = colnames(antidepressant_bio))[, 2]
knn_chem_pred_bio_confusion_matrix <- NULL
for(i in seq(from = 0, to = 1, 0.1)) {
tmp <- pred
tmp[tmp >= i] <- 1
tmp[tmp < i] <- 0
knn_chem_pred_bio_confusion_matrix <- list.append(knn_chem_pred_bio_confusion_matrix, list(confusionMatrix(tmp, obs, positive = "1"), paste("Cutoff: ", i)))
}
tmp
pre
pred
pred <- melt(knn_chem_pred_bio, measure.vars = colnames(knn_chem_pred_bio))[, 2]
obs <- melt(antidepressant_bio, measure.vars = colnames(antidepressant_bio))[, 2]
knn_chem_pred_bio_confusion_matrix <- NULL
for(i in seq(from = 0, to = 1, 0.1)) {
tmp <- pred
tmp[tmp >= i] <- 1
tmp[tmp < i] <- 0
knn_chem_pred_bio_confusion_matrix <- list.append(knn_chem_pred_bio_confusion_matrix, list(confusionMatrix(tmp, obs, positive = "1"), paste("Cutoff: ", i)))
}
factor(tmp)
factor(obs)
obs
antidepressant_bio
melt(antidepressant_bio, measure.vars = colnames(antidepressant_bio))
antidepressant_bio[1:5, 1:5]
antidepressant_bio[1:5, ]
rownames(antidepressant_bio) <- rownames(antidepressant_bio_nominal)
antidepressant_bio
antidepressant_bio <- as.data.frame(antidepressant_bio)
antidepressant_bio[1:5, 1:5]
name <- read.csv(..\\..\\data\\yy2012\\antidepressant_bio.csv)[, 1]
name <- read.csv("..\\..\\data\\yy2012\\antidepressant_bio.csv")[, 1]
name
row.names(antidepressant_bio) <- name
antidepressant_bio[1:5, 1:5]
row.names(antidepressant_bio_nominal) <- name
row.names(antidepressant_chem) <- name
row.names(antidepressant_pharm) <- name
name <- read.csv("..\\..\\data\\yy2012\\without_antidepressant_bio.csv")[, 1]
name
row.names(without_antidepressant_bio) <- name
row.names(without_antidepressant_chem) <- name
row.names(without_antidepressant_pharm) <- name
rm(without_antidepressant_bio_l)
rm(name)
pred <- melt(knn_chem_pred_bio, measure.vars = colnames(knn_chem_pred_bio))[, 2]
obs <- melt(antidepressant_bio, measure.vars = colnames(antidepressant_bio))[, 2]
knn_chem_pred_bio_confusion_matrix <- NULL
for(i in seq(from = 0, to = 1, 0.1)) {
tmp <- pred
tmp[tmp >= i] <- 1
tmp[tmp < i] <- 0
knn_chem_pred_bio_confusion_matrix <- list.append(knn_chem_pred_bio_confusion_matrix, list(confusionMatrix(tmp, obs, positive = "1"), paste("Cutoff: ", i)))
}
knn_chem_pred_bio_confusion_matrix
rm(tmp)
rm(i)
rm(cl)
rm(predict_result)
rm(model)
rm(rose_training_set)
without_antidepressant_bio[1:5, 1:5]
without_antidepressant_chem[1:5, 1:5]
without_antidepressant_pharm[1:5, 1:5]
without_antidepressant_bio_nominal <- without_antidepressant_bio
without_antidepressant_bio <- apply(without_antidepressant_bio, 2, factor, levels = c("no", "yes"), labels = c(0, 1))
without_antidepressant_bio[1:5, 1:5]
as.numeric(without_antidepressant_bio)
dim(as.numeric(without_antidepressant_bio))
without_antidepressant_bio <- apply(without_antidepressant_bio, 2, as.numeric
)
without_antidepressant_bio[1:5, 1:5]
antidepressant_bio <- apply(antidepressant_bio, 2, as.numeric)
antidepressant_bio
antidepressant_bio as.data.frame(antidepressant_bio)
antidepressant_bio <- as.data.frame(antidepressant_bio)
without_antidepressant_bio <- as.data.frame(without_antidepressant_bio)
pred <- melt(testing_predict_result, measure.vars = colnames(testing_predict_result))[, 2]
obs <- melt(antidepressant_bio, measure.vars = colnames(antidepressant_bio))[, 2]
knn_chem_pred_bio_confusion_matrix <- NULL
for(i in seq(from = 0, to = 1, 0.1)) {
tmp <- pred
tmp[tmp >= i] <- 1
tmp[tmp < i] <- 0
knn_chem_pred_bio_confusion_matrix <- list.append(knn_chem_pred_bio_confusion_matrix, list(confusionMatrix(tmp, obs, positive = "1"), paste("Cutoff: ", i)))
}
library(reshape2)
library(rlit)
library(rlist)
pred <- melt(testing_predict_result, measure.vars = colnames(testing_predict_result))[, 2]
obs <- melt(antidepressant_bio, measure.vars = colnames(antidepressant_bio))[, 2]
knn_chem_pred_bio_confusion_matrix <- NULL
for(i in seq(from = 0, to = 1, 0.1)) {
tmp <- pred
tmp[tmp >= i] <- 1
tmp[tmp < i] <- 0
knn_chem_pred_bio_confusion_matrix <- list.append(knn_chem_pred_bio_confusion_matrix, list(confusionMatrix(tmp, obs, positive = "1"), paste("Cutoff: ", i)))
}
library(caret)
pred <- melt(testing_predict_result, measure.vars = colnames(testing_predict_result))[, 2]
obs <- melt(antidepressant_bio, measure.vars = colnames(antidepressant_bio))[, 2]
knn_chem_pred_bio_confusion_matrix <- NULL
for(i in seq(from = 0, to = 1, 0.1)) {
tmp <- pred
tmp[tmp >= i] <- 1
tmp[tmp < i] <- 0
knn_chem_pred_bio_confusion_matrix <- list.append(knn_chem_pred_bio_confusion_matrix, list(confusionMatrix(tmp, obs, positive = "1"), paste("Cutoff: ", i)))
}
library(pROC)
roc(pred, obs)
roc(obs, pred)
preiction(pred, obs)
prediction(pred, obs)
library(ROCR)
prediction(pred, obs)
rocr_pred <- prediction(pred, obs)
performance(rocr_pred, "tpr", "fpr")
plot(performance(rocr_pred, "tpr", "fpr"))
plot(roc(obs, pred))
library(Epi)
ROC(obs ~ pred, plot = "ROC")
ROC(form = obs ~ pred, plot = "ROC")
ROC_pred <- ROC(form = obs ~ pred, plot = "ROC")
str(ROC_pred)
roc_result <- roc(obs, pred)
ROC_result <- ROC_pred
rocr_result <- rocr_pred
rm(ROC_pred)
rm(rocr_pred)
roc_result
str(roc_result)
str(ROCR_result)
str(rocr_result)
rocr_result$cutoffs
rocr_result["cutoffs"]
rocr_result@cutoffs
install.packages("OptimalCutpoints")
library(OptimalCutpoints)
optimal.cutpoints(obs ~ pred, method = "MaxSpSe")
optimal.cutpoints(formula = obs ~ pred, method = "MaxSpSe")
optimal.cutpoints(obs, pred, method = "MaxSpSe")
optimal.cutpoints(obs, pred, data = NULL, method = "MaxSpSe")
optimal.cutpoints(obs, pred, data = cbind(obs, pred), method = "MaxSpSe")
plot(roc_result, print.thres = "best", print.thres.best.method = "youden")
roc_result$thresholds
roc_result$auc
roc_result$percent
roc_result$sensitivities
plot(roc_result, print.thres = "best", print.thres.best.method = "closest.topleft")
knn_chem_pred_bio
tmp <- knn_chem_pred_bio
tmp[tmp >= 0.095] <- 1
tmp[tmp < 0.095] <- 0
tmp
write.csv(tmp, "..\\..\\data\\yy2012\\knn_chem_predict_bio.csv")
model <- train(Class ~ ., data = down_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
library(caret)
model <- train(Class ~ ., data = down_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
warnings()
model
str(model)
train_control
train_control <- trainControl(method = "cv", number = 5, classProbs = TRUE, savePredictions = TRUE, summaryFunction = twoClassSummary)
model <- train(Class ~ ., data = down_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
model
str(model)
model <- train(Class ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
model
str(smote_training_set)
str(model)
model$predictiob
model$prediction
str(model)
model$resample
