# computational cost and performanerce dilemma: perc.over = 1000, perc.under = 250 (current optimal)
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000, perc.under = 250)
# start training model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 5, metric = "ROC")
knn_pharm_bio_model[[i]] <- model
}
###
### Training
for(i in 1:ncol(without_antidepressant_bio)) {
# training parameter setting (5 fold cross validation)
train_control <- trainControl(method = "cv", number = 5, classProbs = TRUE, savePredictions = TRUE, summaryFunction = twoClassSummary)
# build a binary relevance training set
training_set <- as.data.frame(cbind(without_antidepressant_chem, LABEL = without_antidepressant_bio_nominal[, i]))
# resampling training set prior to training
# computational cost and performanerce dilemma: perc.over = 1000, perc.under = 250 (current optimal)
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000, perc.under = 250)
# start training model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 5, metric = "ROC")
knn_pharm_bio_model[[i]] <- model
}
### Training
for(i in 1:ncol(without_antidepressant_bio)) {
# training parameter setting (5 fold cross validation)
train_control <- trainControl(method = "cv", number = 5, classProbs = TRUE, savePredictions = TRUE, summaryFunction = twoClassSummary)
# build a binary relevance training set
training_set <- as.data.frame(cbind(without_antidepressant_pharm, LABEL = without_antidepressant_bio_nominal[, i]))
# resampling training set prior to training
# computational cost and performanerce dilemma: perc.over = 1000, perc.under = 250 (current optimal)
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000, perc.under = 250)
# start training model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 5, metric = "ROC")
knn_pharm_bio_model[[i]] <- model
}
###
training_set <- as.data.frame(cbind(without_antidepressant_pharm, LABEL = without_antidepressant_bio_nominal[, 1]))
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000, perc.under = 250)
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 5, metric = "ROC")
apply(without_antidepressant_pharm, 2, any, 0)
colSums(without_antidepressant_pharm)
colSums(without_antidepressant_pharm != 0)
colSums(without_antidepressant_pharm == 0)
apply(without_antidepressant_pharm, 2, function(col){all(col == 0)})
any(apply(without_antidepressant_pharm, 2, function(col){all(col == 0)}))
which(apply(without_antidepressant_pharm, 2, function(col){all(col == 0)}))
without_antidepressant_pharm <- apply(without_antidepressant_pharm, 2, function(col){all(col != 0)})
without_antidepressant_pharm
library(doParallel)
library(DMwR)
library(caret)
library(pROC)
library(Epi)
without_antidepressant_pharm
antidepressant_pharm[, apply(antidepressant_pharm, 2, function(row){all(col != 0)})]
antidepressant_pharm[apply(antidepressant_pharm, 2, function(row){all(col != 0)})]
apply(antidepressant_pharm, 2, function(row){all(col != 0)})
apply(without_antidepressant_pharm, 2, function(row){all(col != 0)})
apply(without_antidepressant_pharm, 2, function(col){all(col != 0)})
without_antidepressant_pharm[apply(without_antidepressant_pharm, 2, function(col){all(col != 0)})]
without_antidepressant_pharm[, apply(without_antidepressant_pharm, 2, function(col){all(col != 0)})]
without_antidepressant_pharm[apply(without_antidepressant_pharm, 2, function(col){all(col != 0)}), ]
without_antidepressant_pharm[which(apply(without_antidepressant_pharm, 2, function(col){all(col != 0)}))]
which(apply(without_antidepressant_pharm, 2, function(col){all(col != 0)})]
which(apply(without_antidepressant_pharm, 2, function(col){all(col != 0)})
)
which(apply(without_antidepressant_pharm, 2, function(col){all(col != 0)}))
apply(without_antidepressant_pharm, 2, function(col){all(col != 0)})
apply(without_antidepressant_pharm, 2, function(col){all(col == 0)})
apply(without_antidepressant_pharm, 2, function(col){all(col != 0)})
any(apply(without_antidepressant_pharm, 2, function(col){all(col != 0)}))
apply(without_antidepressant_pharm, 2, function(col){all(col == 0)})
apply(without_antidepressant_pharm, 2, function(col){sum(col) == 0})
apply(without_antidepressant_pharm, 2, function(col){sum(col == 0)})
apply(without_antidepressant_pharm, 2, function(col){sum(col)})
apply(without_antidepressant_pharm, 2, function(col){sum(col == 0)})
apply(without_antidepressant_pharm, 2, function(col){sum(col == 1)})
apply(without_antidepressant_pharm, 2, function(x) { all(x == 0) })
any(apply(without_antidepressant_pharm, 2, function(x) { all(x == 0) }))
which(apply(without_antidepressant_pharm, 2, function(x) { all(x == 0) }))
without_antidepressant_pharm[which(apply(without_antidepressant_pharm, 2, function(x) { all(x != 0) }))]
without_antidepressant_pharm[which(apply(without_antidepressant_pharm, 2, function(x) { all(x != 0) })), ]
class(which(apply(without_antidepressant_pharm, 2, function(x) { all(x == 0) })))
length(which(apply(without_antidepressant_pharm, 2, function(x) { all(x == 0) })))
which(apply(without_antidepressant_pharm, 2, function(x) { all(x == 0) }))
which(colnames(without_antidepressant_pharm) == "distended.bladder")
without_antidepressant_pharm[92, ]
without_antidepressant_pharm[, 92]
without_antidepressant_pharm[, which(apply(without_antidepressant_pharm, 2, function(x) { all(x != 0) }))]
which(apply(without_antidepressant_pharm, 2, function(x) { all(x != 0) }))
which(apply(without_antidepressant_pharm, 2, function(x) { all(x == 0) }))
which(apply(without_antidepressant_pharm, 2, function(x) { all(x != 0) }))
which(apply(without_antidepressant_pharm, 2, function(x) { all(x == 0) }))
remove_data_index <- which(apply(without_antidepressant_pharm, 2, function(x) { all(x == 0) }))
removed_data_index <- which(apply(without_antidepressant_pharm, 2, function(x) { all(x == 0) }))
rm(remove_data_index)
without_antidepressant_pharm[, -removed_data_index]
without_antidepressant_pharm_clean_zero <- without_antidepressant_pharm[, -removed_data_index]
without_antidepressant_pharm_cleaned <- without_antidepressant_pharm_clean_zero
rm(without_antidepressant_pharm_clean_zero)
### Pre-processing: start parallel computing
cl <- makeCluster(detectCores())
registerDoParallel(cl)
###
### Training
for(i in 1:ncol(without_antidepressant_bio)) {
# training parameter setting (5 fold cross validation)
train_control <- trainControl(method = "cv", number = 5, classProbs = TRUE, savePredictions = TRUE, summaryFunction = twoClassSummary)
# build a binary relevance training set
training_set <- as.data.frame(cbind(without_antidepressant_pharm_cleaned, LABEL = without_antidepressant_bio_nominal[, i]))
# resampling training set prior to training
# computational cost and performanerce dilemma: perc.over = 1000, perc.under = 250 (current optimal)
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000, perc.under = 250)
# start training model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 5, metric = "ROC")
knn_pharm_bio_model[[i]] <- model
}
###
knn_pharm_bio_model <- list()
### Training
for(i in 1:ncol(without_antidepressant_bio)) {
# training parameter setting (5 fold cross validation)
train_control <- trainControl(method = "cv", number = 5, classProbs = TRUE, savePredictions = TRUE, summaryFunction = twoClassSummary)
# build a binary relevance training set
training_set <- as.data.frame(cbind(without_antidepressant_pharm_cleaned, LABEL = without_antidepressant_bio_nominal[, i]))
# resampling training set prior to training
# computational cost and performanerce dilemma: perc.over = 1000, perc.under = 250 (current optimal)
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000, perc.under = 250)
# start training model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 5, metric = "ROC")
knn_pharm_bio_model[[i]] <- model
}
###
knn_chem_pred_bio
rm()
rm(removed_data_index)
rm(chem_bio_model)
knn_chem_pred_bio
knn_pharm_bio_model
dim(knn_pharm_bio_model)
length(knn_pharm_bio_model)
rm(knn_pharm_bio_model)
library(doParallel)
library(DMwR)
library(caret)
library(pROC)
library(Epi)
load("knn-pharm-bio-model.RData")
rm
rm
rm(knn_pharm_bio_model)
gc()
gc()
library(doParallel)
library(DMwR)
library(caret)
library(pROC)
library(Epi)
cl <- makeCluster(detectCores())
registerDoParallel(cl)
knn_pharm_bio_model <- list()
for(i in 698:ncol(without_antidepressant_bio)) {
# training parameter setting (5 fold cross validation)
train_control <- trainControl(method = "cv", number = 5, classProbs = TRUE, savePredictions = TRUE, summaryFunction = twoClassSummary)
# build a binary relevance training set
training_set <- as.data.frame(cbind(without_antidepressant_pharm_cleaned, LABEL = without_antidepressant_bio_nominal[, i]))
# resampling training set prior to training
# computational cost and performanerce dilemma: perc.over = 1000, perc.under = 250 (current optimal)
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000, perc.under = 250)
# start training model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 5, metric = "ROC")
knn_pharm_bio_model[[i]] <- model
}
save(knn_pharm_bio_model, "knn-pharm-bio-model698-1368.RData")
save(knn_pharm_bio_model, file = "knn-pharm-bio-model698-1368.RData")
### Prediction: predict result
predict_result <- list()
for(i in 1:ncol(without_antidepressant_bio)) {
predict_result[[i]] <- predict(knn_pharm_bio_model[[i]]$finalModel, antidepressant_chem)
}
testing_predict_result <- data.frame(row.names = row.names(antidepressant_bio))
for(i in 1:ncol(antidepressant_bio)) {
testing_predict_result <- cbind(testing_predict_result, predict_result[[i]][, 2])
}
colnames(testing_predict_result) <- colnames(antidepressant_bio)
###
length(knn_pharm_bio_model)
knn_chem_pred_bio_model
knn_pharm_bio_model
knn_pharm_bio_model[[1]]
head(knn_pharm_bio_model)
knn_pharm_bio_model[[698]]
### Prediction: predict result
predict_result <- list()
for(i in 698:ncol(without_antidepressant_bio)) {
predict_result[[i]] <- predict(knn_pharm_bio_model[[i]]$finalModel, antidepressant_chem)
}
testing_predict_result <- data.frame(row.names = row.names(antidepressant_bio))
for(i in 1:ncol(antidepressant_bio)) {
testing_predict_result <- cbind(testing_predict_result, predict_result[[i]][, 2])
}
colnames(testing_predict_result) <- colnames(antidepressant_bio)
###
### Prediction: predict result
predict_result <- list()
for(i in 698:ncol(without_antidepressant_bio)) {
predict_result[[i]] <- predict(knn_pharm_bio_model[[i]]$finalModel, antidepressant_pharm)
}
testing_predict_result <- data.frame(row.names = row.names(antidepressant_bio))
for(i in 1:ncol(antidepressant_bio)) {
testing_predict_result <- cbind(testing_predict_result, predict_result[[i]][, 2])
}
colnames(testing_predict_result) <- colnames(antidepressant_bio)
###
predict_result <- predict(knn_pharm_bio_model[[698]]$finalModel, antidepressant_pharm)
antidepressant_pharm
predict_result <- predict(knn_pharm_bio_model[[698]]$finalModel, antidepressant_pharm)
dim(knn_pharm_bio_model[[698]]$finalModel)
str(knn_pharm_bio_model[[698]]$finalModel)
###### Pre-processing: clean features with all zero
removed_data_index <- which(apply(without_antidepressant_pharm, 2, function(x) { all(x == 0) }))
antidepressant_pharm_cleaned <- antidepressant_pharm[, -removed_data_index]
###
### Prediction: predict result
predict_result <- list()
for(i in 698:ncol(without_antidepressant_bio)) {
predict_result[[i]] <- predict(knn_pharm_bio_model[[i]]$finalModel, antidepressant_pharm)
}
testing_predict_result <- data.frame(row.names = row.names(antidepressant_bio))
for(i in 1:ncol(antidepressant_bio)) {
testing_predict_result <- cbind(testing_predict_result, predict_result[[i]][, 2])
}
colnames(testing_predict_result) <- colnames(antidepressant_bio)
###
### Prediction: predict result
predict_result <- list()
for(i in 698:ncol(without_antidepressant_bio)) {
predict_result[[i]] <- predict(knn_pharm_bio_model[[i]]$finalModel, antidepressant_pharm_cleaned)
}
testing_predict_result <- data.frame(row.names = row.names(antidepressant_bio))
for(i in 1:ncol(antidepressant_bio)) {
testing_predict_result <- cbind(testing_predict_result, predict_result[[i]][, 2])
}
colnames(testing_predict_result) <- colnames(antidepressant_bio)
###
### Prediction: predict result
predict_result <- list()
for(i in 698:ncol(without_antidepressant_bio)) {
predict_result[[i]] <- predict(knn_pharm_bio_model[[i]]$finalModel, antidepressant_pharm_cleaned)
}
testing_predict_result <- data.frame(row.names = row.names(antidepressant_bio))
for(i in 1:ncol(antidepressant_bio_cleaned)) {
testing_predict_result <- cbind(testing_predict_result, predict_result[[i]][, 2])
}
colnames(testing_predict_result) <- colnames(antidepressant_bio)
###
### Prediction: predict result
predict_result <- list()
for(i in 698:ncol(without_antidepressant_bio)) {
predict_result[[i]] <- predict(knn_pharm_bio_model[[i]]$finalModel, antidepressant_pharm_cleaned)
}
testing_predict_result <- data.frame(row.names = row.names(antidepressant_bio))
for(i in 698:ncol(antidepressant_bio)) {
testing_predict_result <- cbind(testing_predict_result, predict_result[[i]][, 2])
}
colnames(testing_predict_result) <- colnames(antidepressant_bio)[698:ncol(antidepressant_bio)]
###
gc()
testing_predict_result
rownames(testing_predict_result)
row.names(testing_predict_result) <- rownames(antidepressant_bio)
rownames(antidepressant_bio)
rownames(antidepressant_pharm)
length(rownames(antidepressant_pharm))
row.names(antidepressant_bio) <- row.names(antidepressant_pharm)
row.names(antidepressant_bio)
row.names(testing_predict_result) <- rownames(antidepressant_bio)
row.names(antidepressant_chem)
row.names(testing_predict_result)
write.csv(testing_predict_result, "tmp.csv")
rm(knn_pharm_bio_model)
rm(removed_data_index)
rm(down_training_set)
rm(up_training_set)
knn_chem_pred_bio
knn_chem_pred_bio_confusion_matrix
load("knn-pharm-bio-model (1-697).RData")
knn_pharm_bio_model[1:5]
save(knn_pharm_bio_model[1:300], file = "knn-pharm-bio-model (1-300).RData")
knn_pharm_bio_model[1:5]
knn_pharm_bio_model[1:300]
save(knn_pharm_bio_model[1:300], file = "knn-pharm-bio-model (1-300).RData")
tmp <- knn_pharm_bio_model[1:300]
save(tmp, file = "knn-pharm-bio-model (1-300).RData")
tmp <- knn_pharm_bio_model[301:length(knn_pharm_bio_model)]
save(tmp, file = "knn-pharm-bio-model (301-697).RData")
rm(knn_pharm_bio_model)
rm(tmp)
gc()
load("knn-pharm-bio-model (1-300).RData")
for(i in 1:300) {
predict_result[[i]] <- predict(knn_pharm_bio_model[[i]]$finalModel, antidepressant_pharm_cleaned)
}
for(i in 1:300) {
testing_predict_result <- cbind(testing_predict_result, predict_result[[i]][, 2])
}
colnames(testing_predict_result) <- colnames(antidepressant_bio)[1:300]
load("knn-pharm-bio-model (1-300).RData")
library(doParallel)
library(DMwR)
library(caret)
library(pROC)
library(Epi)
cl <- makeCluster(detectCores())
registerDoParallel(cl)
knn_pharm_bio_model <- tmp
rm(tmp)
save(knn_pharm_bio_model, file = "knn-pharm-bio-model (1-300)")
save(knn_pharm_bio_model, file = "knn-pharm-bio-model (1-300).RData")
for(i in 1:300) {
predict_result[[i]] <- predict(knn_pharm_bio_model[[i]]$finalModel, antidepressant_pharm_cleaned)
}
for(i in 1:300 {
testing_predict_result <- cbind(testing_predict_result, predict_result[[i]][, 2])
}
colnames(testing_predict_result) <- colnames(antidepressant_bio)[1:300]
for(i in 1:300) {
predict_result[[i]] <- predict(knn_pharm_bio_model[[i]]$finalModel, antidepressant_pharm_cleaned)
}
for(i in 1:300) {
testing_predict_result <- cbind(testing_predict_result, predict_result[[i]][, 2])
}
colnames(testing_predict_result) <- colnames(antidepressant_bio)[1:300]
rm(knn_pharm_bio_model)
gc()
load("knn-pharm-bio-model (301-697)")
load("knn-pharm-bio-model (301-697).RData")
knn_pharm_bio_model <- tmp
rm(tmp)
save(knn_pharm_bio_model, "knn-pharm-bio-model (301-697).RData")
save(knn_pharm_bio_model, file = "knn-pharm-bio-model (301-697).RData")
for(i in 301:697) {
predict_result[[i]] <- predict(knn_pharm_bio_model[[i]]$finalModel, antidepressant_pharm_cleaned)
}
testing_predict_result <- data.frame(row.names = row.names(antidepressant_bio))
for(i in 301:697) {
testing_predict_result <- cbind(testing_predict_result, predict_result[[i]][, 2])
}
colnames(testing_predict_result) <- colnames(antidepressant_bio)[301:697]
rm(knn_pharm_bio_model)
rm(testing_predict_result)
library(doParallel)
library(DMwR)
library(caret)
library(reshape2)
library(pROC)
### Pre-processing: start parallel computing
cl <- makeCluster(detectCores())
registerDoParallel(cl)
###
load("knn-pharm-bio-model (1-300).RData")
# change i according to the boundary of new data set
for(i in 1:300) {
predict_result[[i]] <- predict(knn_pharm_bio_model[[i]]$finalModel, antidepressant_pharm_cleaned)
}
# change i according to the boundary of new data set
for(i in 1:300) {
testing_predict_result <- cbind(testing_predict_result, predict_result[[i]][, 2])
}
predict_result <- vector("list", ncol(antidepressant_pharm_cleaned))
testing_predict_result <- data.frame(row.names = row.names(antidepressant_bio))
for(i in 1:300) {
predict_result[[i]] <- predict(knn_pharm_bio_model[[i]]$finalModel, antidepressant_pharm_cleaned)
}
# change i according to the boundary of new data set
for(i in 1:300) {
testing_predict_result <- cbind(testing_predict_result, predict_result[[i]][, 2])
}
rm(knn_pharm_bio_model)
load("knn-pharm-bio-model (301-697).RData")
for(i in 301:697) {
predict_result[[i]] <- predict(knn_pharm_bio_model[[i]]$finalModel, antidepressant_pharm_cleaned)
}
# change i according to the boundary of new data set
for(i in 301:697) {
testing_predict_result <- cbind(testing_predict_result, predict_result[[i]][, 2])
}
j <- 1
for(i in 301:697) {
predict_result[[i]] <- predict(knn_pharm_bio_model[[j]]$finalModel, antidepressant_pharm_cleaned)
}
rm(knn_pharm_bio_model)
load("knn-pharm-bio-model (1-300).RData")
## [CAUTIOUS] execute this line before starting to merge data (one time process only)
predict_result <- vector("list", ncol(antidepressant_pharm_cleaned))
testing_predict_result <- data.frame(row.names = row.names(antidepressant_bio))
##
## repeat several times untill all the data are merged
# change i according to the boundary of new data set
# j <- 1
for(i in 1:300) {
predict_result[[i]] <- predict(knn_pharm_bio_model[[i]]$finalModel, antidepressant_pharm_cleaned)
#	j <- j + 1
}
# change i according to the boundary of new data set
for(i in 1:300) {
testing_predict_result <- cbind(testing_predict_result, predict_result[[i]][, 2])
}
rm(knn_chem_pred_bio)
load("knn-pharm-bio-model (301-697).RData")
## repeat several times untill all the data are merged
# change i according to the boundary of new data set
j <- 1
for(i in 1:300) {
predict_result[[i]] <- predict(knn_pharm_bio_model[[i]]$finalModel, antidepressant_pharm_cleaned)	j <- j + 1
}
# change i according to the boundary of new data set
for(i in 1:300) {
testing_predict_result <- cbind(testing_predict_result, predict_result[[i]][, 2])
}
rm(knn_pharm_bio_model)
knn_pharm_pred_bio <- read.csv("knn_pharm_predict_bio (prob).csv")
row.names(knn_pharm_pred_bio) <- knn_pharm_pred_bio[, 1]
knn_pharm_pred_bio
knn_pharm_pred_bio[1:5, 1:5]
knn_pharm_pred_bio <- knn_pharm_pred_bio[, -1]
knn_pharm_pred_bio[1:5, 1:5]
rm(i)
rm(j)
library(doParallel)
library(DMwR)
library(caret)
library(reshape2)
library(pROC)
### Pre-processing: start parallel computing
cl <- makeCluster(detectCores())
registerDoParallel(cl)
###
### Performance evaluation: combine all different threshold (here: 0.0 ~ 1.0) confusion matrix into one list
pred <- melt(testing_predict_result, measure.vars = colnames(testing_predict_result))[, 2]
obs <- melt(antidepressant_bio, measure.vars = colnames(antidepressant_bio))[, 2]
###
### Performance evaluation: plot roc curve
# plot roc curve in terms of sensitivity and specificity
roc_pred <- roc(obs, pred)
plot(roc_pred)
# finding threshold by ploting roc curve with best cutoff points by maximizing sensitivity and specificity
plot(roc_result, print.thres = "best", print.thres.best.method = "youden")
# finding threshold by ploting roc curve with best cutoff points by finding the closest point to (0, 1)
plot(roc_result, print.thres = "best", print.thres.best.method = "closest.topleft")
str(roc_result)
### Performance evaluation: plot roc curve
# plot roc curve in terms of sensitivity and specificity
roc_result <- roc(obs, pred)
plot(roc_result)
# finding threshold by ploting roc curve with best cutoff points by maximizing sensitivity and specificity
plot(roc_result, print.thres = "best", print.thres.best.method = "youden")
# finding threshold by ploting roc curve with best cutoff points by finding the closest point to (0, 1)
plot(roc_result, print.thres = "best", print.thres.best.method = "closest.topleft")
length(pred)
length(obs)
dim(testing_predict_result)
dim(antidepressant_bio)
### Performance evaluation: combine all different threshold (here: 0.0 ~ 1.0) confusion matrix into one list
pred <- melt(knn_pharm_pred_bio, measure.vars = colnames(knn_pharm_pred_bio))[, 2]
obs <- melt(antidepressant_bio, measure.vars = colnames(antidepressant_bio))[, 2]
###
roc_result <- roc(obs, pred)
plot(roc_result)
# finding threshold by ploting roc curve with best cutoff points by maximizing sensitivity and specificity
plot(roc_result, print.thres = "best", print.thres.best.method = "youden")
# finding threshold by ploting roc curve with best cutoff points by finding the closest point to (0, 1)
plot(roc_result, print.thres = "best", print.thres.best.method = "closest.topleft")
knn_pharm_pred_bio > 0.106
which(knn_pharm_pred_bio > 0.106)
knn_pharm_pred_bio[which(knn_pharm_pred_bio >= 0.106), ] <- 1
knn_pharm_pred_bio[which(knn_pharm_pred_bio < 0.106), ] <- 0
gc()
knn_pharm_pred_bio[which(knn_pharm_pred_bio < 0.106), ] <- 0
which(knn_pharm_pred_bio < 0.106)
rm(knn_pharm_pred_bio)
rm(knn_chem_pred_bio_confusion_matrix)
library(doParallel)
library(DMwR)
library(caret)
library(reshape2)
library(pROC)
knn_pharm_pred_bio <- read.csv("knn_pharm_predict_bio (prob).csv")
row.names(knn_pharm_pred_bio) <- knn_pharm_pred_bio[, 1]
knn_pharm_pred_bio <- knn_pharm_pred_bio[, -1]
knn_pharm_pred_bio[1:5, 1:5]
which(knn_pharm_pred_bio > 0.106)
pred
knn_pharm_pred_bio[which(knn_pharm_pred_bio > 0.106)]
knn_pharm_pred_bio[which(knn_pharm_pred_bio > 0.106), 1]
knn_pharm_pred_bio[knn_pharm_pred_bio > 0.106]
knn_pharm_pred_bio[knn_pharm_pred_bio > 0.106] <- 1
knn_pharm_pred_bio[knn_pharm_pred_bio >= 0.106] <- 1
knn_pharm_pred_bio[knn_pharm_pred_bio < 0.106] <- 0
knn_pharm_pred_bio
write.csv(knn_pharm_pred_bio, "knn_pharm_predict_bio.csv")
library(reshape2)
library(pROC)
### Performance evaluation: plot roc curve
# plot roc curve in terms of sensitivity and specificity
roc_result <- roc(obs, pred)
plot(roc_result)
# finding threshold by ploting roc curve with best cutoff points by maximizing sensitivity and specificity
plot(roc_result, print.thres = "best", print.thres.best.method = "youden")
# finding threshold by ploting roc curve with best cutoff points by finding the closest point to (0, 1)
plot(roc_result, print.thres = "best", print.thres.best.method = "closest.topleft")
srt(roc_result)
str(roc_result)
"hi~"
