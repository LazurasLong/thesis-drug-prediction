table(chem_bio$Class)
table(training_set$Class)
# define training control
train_control <- trainControl(method="cv", number=5)
# train the model
chem_bio_model[1] <- train(Class ~ ., data=training_set, trControl=train_control, method="nb")
apply(training_set, 2, as.factor)
training_set <- apply(training_set, 2, as.factor)
# train the model
chem_bio_model[1] <- train(Class ~ ., data=training_set, trControl=train_control, method="nb")
training_set[1,]
class(training_set[1,])
install.packages("doParallel")
library(doParallel)
cl <- makeCluster(detectCores())
registerDoParallel(cl)
c1
library(doParallel)
cl <- makeCluster(detectCores())
registerDoParallel(cl)
c1
cl
# train the model
chem_bio_model[1] <- train(Class ~ ., data=training_set, trControl=train_control, method="nb")
NaiveBayes(Class ~ ., data = training_set)
training_set <- as.data.frame(training_set)
class(training_set[1,1])
# train the model
chem_bio_model[1] <- train(Class ~ ., data=training_set, trControl=train_control, method="nb")
# train the model
NaiveBayes(Class ~ ., data=training_set)
# train the model
chem_bio <- NaiveBayes(Class ~ ., data=training_set)
summary(chem_bio)
chem_bio$overall["Accuracy"]
chem_bio$Overall["Accuracy"]
str(chem_bio)
# train the model
chem_bio_model[1] <- train(Class ~ ., data=training_set, trControl=train_control, method="nb")
stopCluster(cl)
# train the model
chem_bio_model[1] <- train(Class ~ ., data=training_set, trControl=train_control, method="nb")
# train the model
chem_bio_model[1] <- train(Class ~ ., data=training_set, trControl=train_control, method="nb")
registerDoSEQ()
# train the model
chem_bio_model[1] <- train(Class ~ ., data=training_set, trControl=train_control, method="nb")
chem_bio_model[1]
chem_bio_model[[1]
]
chem_bio_model[[1]]
chem_bio_model[[1,]]
print(chem_bio_model[1])
print(chem_bio_model[[1])
print(chem_bio_model[[1]])
class(chem_bio_model[[1]])
# train the model
chem_bio <- train(Class ~ ., data=training_set, trControl=train_control, method="nb")
str(chem_bio)
print(chem_bio)
sapply(training_set, any, == 0)
apply(training_set, 2, any, 0)
apply(training_set, 2, any, function(x){ x == 0 })
apply(training_set, 2, function(x)any(x == 0))
apply(training_set, 2, function(x)all(x == 0))
?all
all(training_set[, 1] == 0)
all(training_set[, 2] == 0)
all(training_set[, 3] == 0)
matrix(0, nrow = 3, ncol = 3)
test <- matrix(0, nrow = 3, ncol = 3)
all(test[, 3] == 0)
all(test[, 2] == 0)
train_control
train_control <- trainControl(method = "cv", number = 5, sampleing = up)
train_control <- trainControl(method = "cv", number = 5, sampling = up)
train_control <- trainControl(method = "cv", number = 5, sampling = "up")
training_set <- as.data.frame(cbind(without_antidepressant_chem, LABEL = without_antidepressant_bio))
training_set <- as.data.frame(cbind(without_antidepressant_chem, LABEL = without_antidepressant_bio[, 1]))
train_control <- trainControl(method = "cv", number = 5, sampling = "up")
# train the model
chem_bio_model[1] <- train(LABEL ~ ., data = training_set, trControl = train_control, method="nb")
train_set <- as.factor(traing_set)
training_set <- as.factor(training_set)
training_set <- apply(training_set, 2, as.factor)
training_set <- as.data.frame(training_set)
training_set[1,]
class(training_set[1,])
class(training_set[,1])
training_set[,1]
training_set[,1:2]
# train the model
chem_bio_model[1] <- train(LABEL ~ ., data = training_set, trControl = train_control, method="nb")
chem_bio_model[1]
print(chem_bio_model[1])
print(chem_bio_model[[1])
print(chem_bio_model[[1]])
print(chem_bio_model[[1]][1])
print(chem_bio_model[1,1])
print(chem_bio_model[1][1])
print(chem_bio_model[[1]][1])
chem_bio_model <- c()
# train the model
chem_bio_model <- c(chem_bio_model, train(LABEL ~ ., data = training_set, trControl = train_control, method="nb"))
str(chem_bio_model)
dim(chem_bio_model)
length(chem_bio_model)
# train the model
model <- train(LABEL ~ ., data = training_set, trControl = train_control, method="nb")
rm(chem_bio)
chem_bio_model <- c()
chem_bio_model <- list()
chem_bio_model[1] <- model
train_control <- trainControl(method = "cv", number = 5, sampling = "smote")
# train the model
model <- train(LABEL ~ ., data = training_set, trControl = train_control, method = "nb")
require(latice)
require(lattice)
barchart(sum(without_antidepressant_chem) ~ ., data = without_antidepressant_chem)
hist(without_antidepressant_chem)
hist(without_antidepressant_chem[1, ])
hist(as.numeric(without_antidepressant_chem))
library(qqplot)
library(qqplot2)
library(ggplot2)
test <- apply(without_antidepressant_chem, 2, sum)
qplot(test)
qplot(test, geom = "bar")
library(reshape2)
test
qplot(melt(test), geom = "bar")
qplot(test, geom = "bar")
test <- c(1, 2, 3)
qplot(test, geom = "bar")
qplot(t(test), geom = "bar")
qplot(test, geom = "bar")
qplot(without_antidepressant_chem)
qplot(test, geom = "bar")
test <- apply(without_antidepressant_chem, 2, sum)
melt(test)
qplot(test, x = colnames(test),geom = "bar")
qplot(test,geom = "bar")
qplot(test, geom = "bar")
plot(test)
hist(test)
rm(test)
# train the model
model <- train(LABEL ~ ., data = training_set, trControl = train_control, method = "nb")
without_antidepressant_chem[1, 11]
without_antidepressant_chem[1:2, 11]
without_antidepressant_chem[1:2, 11:12]
without_antidepressant_chem[1, "SUB11"]
without_antidepressant_chem[1:5, "SUB11"]
without_antidepressant_chem[, "SUB11"]
which(without_antidepressant_chem[1, "SUB11"])
# train the model
model <- train(LABEL ~ ., data = training_set, trControl = train_control, method = "knn")
print(model)
# train the model
model <- train(LABEL ~ ., data = training_set, trControl = train_control, method = "knn", tunLength = 10)
# train the model
model <- train(LABEL ~ ., data = training_set, trControl = train_control, method = "knn", tunLength = 20)
warnings
warnings()
# train the model
model <- train(LABEL ~ ., data = training_set, trControl = train_control, method = "knn", tuneLength = 10)
print(model)
# train the model
model <- train(LABEL ~ ., data = training_set, trControl = trainControl(method = "cv", number = 5), method = "knn", tuneLength = 10)
print(model)
train_control <- trainControl(method = method, number = number, sampling = sampling)
tr_ctl_method <- "cv"
tr_ctr_number <- "5"
tr_ctl_sampling <- "rose"
train_control <- trainControl(method = tr_ctl_method, number = tr_ctl_number, sampling = tr_ctl_sampling)
tr_ctl_number <- "5"
train_control <- trainControl(method = tr_ctl_method, number = tr_ctl_number, sampling = tr_ctl_sampling)
rm(tr_ctr_number)
# train the model
model <- train(LABEL ~ ., data = training_set, trControl = train_control, method = "knn", tuneLength = 10)
tr_ctl_number <- 5
# train the model
model <- train(LABEL ~ ., data = training_set, trControl = train_control, method = "knn", tuneLength = 10)
train_control
train_control <- trainControl(method = .tr_ctl_method)
train_control
train_control''
train_control$number = 5
# train the model
model <- train(LABEL ~ ., data = training_set, trControl = train_control, method = "knn", tuneLength = 10)
print
print()
print(model)
# train the model
model <- train(LABEL ~ ., data = training_set, trControl = train_control, method = "knn", tuneLength = 20)
print(model)
training_set_subsampling <- as.data.frame(cbind(without_antidepressant_chem, without_antidepressant_bio[, 1]))
training_set_subsampling <- as.data.frame(cbind(without_antidepressant_chem, LABEL = without_antidepressant_bio[, 1]))
training_set_subsampling <- as.data.frame(apply(training_set_subsampling, 2, as.factor))
down_subsampling <- downSample(training_set_subsampling[, -ncol(training_set_subsampling)], training_set_subsampling$LABEL)
up_subsampling <- upSample(training_set_subsampling[, -ncol(training_set_subsampling)], training_set_subsampling$LABEL)
smote_subsampling <- SMOTE(training_set_subsampling[, -ncol(training_set_subsampling)], training_set_subsampling$LABEL)
smote_subsampling <- SMOTE(LABEL ~ ., training_set_subsampling)
rose_subsampling <- ROSE(LABEL ~ ., training_set_subsampling)
trainControl(method = "cv", number = 5)
train_control <- trainControl(method = "cv", number = 5)
down_training_set <- down_subsampling
up_training_set <- up_subsampling
smote_training_set <- smote_subsampling
rose_training_set <- rose_subsampling
rm(down_subsampling)
rm(up_subsampling)
rm(smote_subsampling)
rm(rose_subsampling)
all(training_set_subsampling == training_set)
rm(training_set_subsampling)
# train the model
model <- train(LABEL ~ ., data = down_training_set, trControl = train_control, method = "knn", tuneLength = 10)
# train the model
model <- train(Class ~ ., data = down_training_set, trControl = train_control, method = "knn", tuneLength = 10)
print(model)
# train the model
model <- train(Class ~ ., data = up_training_set, trControl = train_control, method = "knn", tuneLength = 10)
print(model)
# train the model
model <- train(Class ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10)
print(model)
confusionMatrix(smote_training_set$LABEL, model)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, summaryFunction = twoClassSummary)
warnings()
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, classProb = True, metric = "ROC")
train_control <- trainControl(method = "cv", number = 5, classProbs = True, summaryFunction = twoClassSummary)
train_control <- trainControl(method = "cv", number = 5, classProbs = TRUE, summaryFunction = twoClassSummary)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
smote_training_set[1,]
class(smote_training_set[1,])
class(smote_training_set[,1])
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10)
train_control <- trainControl(method = "cv", number = 5, classProbs = TRUE)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
levels(smote_training_set$LABEL) <- list(no = "0", yes = "1")
smote_training_set[1,]
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
train_control <- trainControl(method = "cv", number = 5, classProbs = TRUE, summaryFunction = twoClassSummary)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10)
print(model)
# train the model
model <- train(LABEL ~ ., data = down_training_set, trControl = train_control, method = "knn", tuneLength = 10)
# train the model
model <- train(Class ~ ., data = down_training_set, trControl = train_control, method = "knn", tuneLength = 10)
levels(up_training_set$LABEL) <- list(no = "0", yes = "1")
levels(up_training_set$Class) <- list(no = "0", yes = "1")
levels(down_training_set$Class) <- list(no = "0", yes = "1")
levels(rose_training_set$LABEL) <- list(no = "0", yes = "1")
levels(rose_training_set$Class) <- list(no = "0", yes = "1")
rose[1,]
rose_training_set[1,]
rose_training_set[]
# train the model
model <- train(Class ~ ., data = up_training_set, trControl = train_control, method = "knn", tuneLength = 10)
print(model)
# train the model
model <- train(Class ~ ., data = down_training_set, trControl = train_control, method = "knn", tuneLength = 10)
warnings()
print(model)
# train the model
model <- train(Class ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10)
print(model)
# train the model
model <- train(LABEL ~ ., data = rose_training_set, trControl = train_control, method = "knn", tuneLength = 10)
# train the model
model <- train(LABEL ~ ., data = rose_training_set$data, trControl = train_control, method = "knn", tuneLength = 10)
levels(rose_training_set$data$LABEL) <- list("0" = no, "1" = yes)
rose_training_set$data$LABEL
levels(rose_training_set$data$LABEL) <- list(no = "0", yes = "1")
# train the model
model <- train(LABEL ~ ., data = rose_training_set$data, trControl = train_control, method = "knn", tuneLength = 10)
print(model)
# train the model
model <- train(LABEL ~ ., data = up_training_set, trControl = train_control, method = "knn", tuneLength = 10)
# train the model
model <- train(Class ~ ., data = up_training_set, trControl = train_control, method = "knn", tuneLength = 10)
model
str(model)
# train the model
model <- train(Class ~ ., data = up_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
rm(tr_ctl_method)
rm(tr_ctl_number)
rm(tr_ctl_sampling)
model
cl <- makeCluster(detectCores())
registerDoParallel(cl)
# train the model
model <- train(Class ~ ., data = up_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
model
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
print(model)
# train the model
model <- train(LABEL ~ ., data = rose_training_set$data, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
model
predict(model, antidepressant_chem)
warnings()
antidepressant_bio <- apply(antidepressant_bio, 2, as.factor)
antidepressant_bio <- as.data.frame(apply(antidepressant_bio, 2, as.factor))
antidepressant_chem <- as.data.frame(apply(antidepressant_chem, 2, as.factor))
antidepressant_pharm <- as.data.frame(apply(antidepressant_pharm, 2, as.factor))
without_antidepressant_bio <- as.data.frame(apply(without_antidepressant_bio, 2, as.factor))
without_antidepressant_chem <- as.data.frame(apply(without_antidepressant_chem, 2, as.factor))
without_antidepressant_pharm <- as.data.frame(apply(without_antidepressant_pharm, 2, as.factor))
without_antidepressant_bio <- apply(without_antidepressant_bio, 2, levels, list(no = "0", yes = "1"))
without_antidepressant_bio <- as.data.frame(apply(without_antidepressant_bio, 2, levels, list(no = "0", yes = "1")))
without_antidepressant_bio <- as.data.frame(apply(without_antidepressant_bio, 2, levels, (no = "0", yes = "1")))
without_antidepressant_bio <- as.data.frame(apply(without_antidepressant_bio, 2, levels, c(no = "0", yes = "1")))
without_antidepressant_bio_l <- as.data.frame(apply(without_antidepressant_bio, factor, 2, levels = list(no = "0", yes = "1")))
without_antidepressant_bio_l <- as.data.frame(apply(without_antidepressant_bio, 2, factor, levels = list(no = "0", yes = "1")))
without_antidepressant_bio_1[1:5, 1:3]
without_antidepressant_bio_l[1:5, 1:3]
class(without_antidepressant_bio_l[, 1])
without_antidepressant_bio_l <- as.data.frame(apply(without_antidepressant_bio, 2, factor, levels = c(0, 1), label = c(no, yes)))
without_antidepressant_bio_l <- as.data.frame(apply(without_antidepressant_bio, 2, factor, levels = c(0, 1), label = c("no", "yes")))
class(without_antidepressant_bio_l[, 1])
without_antidepressant_bio_l[1:5, 1:3]
without_antidepressant_bio_l[1:10, 1:3]
without_antidepressant_bio_l[1:15, 1:3]
without_antidepressant_bio_l[1:15, 1:5]
without_antidepressant_bio_l[1:15, 1:6]
without_antidepressant_bio_l[1:20, 1:6]
without_antidepressant_bio_l[1:30, 1:6]
without_antidepressant_bio[1:30, 1:6]
without_antidepressant_bio <- as.data.frame(apply(without_antidepressant_bio, 2, factor, levels = c(0, 1), label = c("no", "yes")))
antidepressant_bio <- as.data.frame(apply(antidepressant_bio, 2, factor, levels = c(0, 1), label = c("no", "yes")))
predict(model, antidepressant_chem)
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(antidepressant_bio[, 1], predict_result)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(antidepressant_bio[, 1], predict_result)
# train the model
model <- train(LABEL ~ ., data = up_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
# train the model
model <- train(Class ~ ., data = up_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
confusionMatrix(antidepressant_bio[, 1], predict_result)
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(antidepressant_bio[, 1], predict_result)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(antidepressant_bio[, 1], predict_result)
# train the model
model <- train(LABEL ~ ., data = rose_training_set$data, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(antidepressant_bio[, 1], predict_result)
# train the model
model <- train(LABEL ~ ., data = rose_training_set$data, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(antidepressant_bio[, 1], predict_result)
# train the model
model <- train(LABEL ~ ., data = rose_training_set$data, trControl = train_control, method = "knn", tuneLength = 10, metric = "Spec")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(antidepressant_bio[, 1], predict_result)
# train the model
model <- train(LABEL ~ ., data = rose_training_set$data, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(antidepressant_bio[, 1], predict_result)
confusionMatrix(predict_result, antidepressant_bio[, 1])
antidepressant_bio[,1]
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(predict_result, antidepressant_bio[, 1])
# train the model
model <- train(Class ~ ., data = down_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(predict_result, antidepressant_bio[, 1])
# train the model
model <- train(Class ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(predict_result, antidepressant_bio[, 1])
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(predict_result, antidepressant_bio[, 1])
# train the model
model <- train(LABEL ~ ., data = rose_training_set$data, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(predict_result, antidepressant_bio[, 1])
# train the model
model <- train(LABEL ~ ., data = smote_training_set$data, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "Sens")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(predict_result, antidepressant_bio[, 1])
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(predict_result, antidepressant_bio[, 1])
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 200)
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 500)
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
class(training_set[, 1])
training_set <- as.data.frame(cbind(without_antidepressant_chem, without_antidepressant_bio[, 1]))
training_set <- as.data.frame(cbind(without_antidepressant_chem, LABEL = without_antidepressant_bio[, 1]))
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(predict_result, antidepressant_bio[, 1])
model
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000)
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 2000)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
predict_result <- predict(model, antidepressant_chem)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
confusionMatrix(predict_result, antidepressant_bio[, 1])
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 500)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
model
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000)
predict_result <- predict(model, antidepressant_chem)
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000, perc.under = 0)
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000, perc.under = 200)
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000, perc.under = 500)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
predict_result <- predict(model, antidepressant_chem)
model
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000, perc.under = 500)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000, perc.under = 250)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
nodel
model
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(predict_result, antidepressant_bio[, 1])
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1250, perc.under = 0)
View(down_training_set)
smote_training_set <- SMOTE(LABEL ~ ., training_set, perc.over = 1000, perc.under = 250)
# train the model
model <- train(LABEL ~ ., data = smote_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
confusionMatrix(predict_result, antidepressant_bio[, 1])
str(model)
chem_bio_model <- list()
chem_bio_model <- list(chem_bio_model, model)
str(chem_bio_model)
predict_result <- predict(model$finalModel, antidepressant_chem)
confusionMatrix(predict_result, antidepressant_bio[, 1])
predict_result <- predict(model, antidepressant_chem)
confusionMatrix(predict_result, antidepressant_bio[, 1])
?predict
chem_bio_model[1]
chem_bio_model[2]
chem_bio_model <- list(model)
str(chem_bio_model)
chem_bio_model <- list(chem_bio_model, model)
chem_bio_model <- list(chem_bio_model, model)
chem_bio_model <- list(chem_bio_model, model)
chem_bio_model <- list(chem_bio_model, model, model)
# train the model
model <- train(Class ~ ., data = down_training_set, trControl = train_control, method = "knn", tuneLength = 10, metric = "ROC")
chem_bio_model <- list(chem_bio_model, model)
length(chem_bio_model)
chem_bio_model[3] <- model
chem_bio_model[[3] <- model
chem_bio_model[[3]] <- model
chem_bio_model[[4]] <- model
chem_bio_model[3]
chem_bio_model[4]
chem_bio_model[[3]]
str(chem_bio_model[[3]])
chem_bio_model[[5]] <- model
chem_bio_model[[6]] <- model
chem_bio_model[[7]] <- model
for i in 1:10:
for(i in 1:10) { chem_bio_model[[i]] <- model }
for(i in 1:10) { chem_bio_model[[i]] <- model }
for(i in 1:50) { chem_bio_model[[i]] <- model }
for(i in 1:50) { chem_bio_model[[i]] <- model }
for(i in 1:50) { chem_bio_model[[i]] <- model }
for(i in 1:500) { chem_bio_model[[i]] <- model }
for(i in 1:500) { chem_bio_model[[i]] <- model }
for(i in 1:1000) { chem_bio_model[[i]] <- model }
for(i in 1:2000) { chem_bio_model[[i]] <- model }
for(i in 1:5000) { chem_bio_model[[i]] <- model }
for(i in 1:10000) { chem_bio_model[[i]] <- model }
chem_bio_model <- list()
rm(i)
